{
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(mkdir:*)",
      "Bash(node -e \"\nconst ZAR = { lat: 41 + 39/60 + 28.4/3600, lon: -(1 + 1/60 + 51.1/3600) };\nconst IF = { lat: 41 + 46/60 + 54/3600, lon: -(0 + 12/60 + 21.4/3600) };\n\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 3440.065; // Earth radius in NM\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nfunction calculateBearing(lat1, lon1, lat2, lon2) {\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const lat1Rad = lat1 * Math.PI / 180;\n  const lat2Rad = lat2 * Math.PI / 180;\n  const y = Math.sin(dLon) * Math.cos(lat2Rad);\n  const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) -\n            Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon);\n  let bearing = Math.atan2(y, x) * 180 / Math.PI;\n  return (bearing + 360) % 360;\n}\n\nconst dist = calculateDistance(ZAR.lat, ZAR.lon, IF.lat, IF.lon);\nconst bearing = calculateBearing(ZAR.lat, ZAR.lon, IF.lat, IF.lon);\n\nconsole.log(''IF Distance from ZAR:'', dist.toFixed(1), ''NM'');\nconsole.log(''IF Radial FROM ZAR:'', bearing.toFixed(1), ''Â°'');\nconsole.log(''IF Coordinates:'', IF.lat.toFixed(6), IF.lon.toFixed(6));\n\")",
      "Bash(node -e \"\nconst ZAR = { lat: 41 + 39/60 + 28.4/3600, lon: -(1 + 1/60 + 51.1/3600) };\n\nfunction radialDistanceToLatLon(lat1, lon1, bearing, distance) {\n  const R = 3440.065; // Earth radius in NM\n  const lat1Rad = lat1 * Math.PI / 180;\n  const lon1Rad = lon1 * Math.PI / 180;\n  const bearingRad = bearing * Math.PI / 180;\n  \n  const lat2Rad = Math.asin(\n    Math.sin(lat1Rad) * Math.cos(distance / R) +\n    Math.cos(lat1Rad) * Math.sin(distance / R) * Math.cos(bearingRad)\n  );\n  \n  const lon2Rad = lon1Rad + Math.atan2(\n    Math.sin(bearingRad) * Math.sin(distance / R) * Math.cos(lat1Rad),\n    Math.cos(distance / R) - Math.sin(lat1Rad) * Math.sin(lat2Rad)\n  );\n  \n  return {\n    lat: lat2Rad * 180 / Math.PI,\n    lon: lon2Rad * 180 / Math.PI\n  };\n}\n\nconst IF = radialDistanceToLatLon(ZAR.lat, ZAR.lon, 281, 16.0);\nconst FAF = radialDistanceToLatLon(ZAR.lat, ZAR.lon, 281, 7.7);\n\nconsole.log(''IF (16.0 DME on R-281):'');\nconsole.log(''  lat:'', IF.lat.toFixed(6));\nconsole.log(''  lon:'', IF.lon.toFixed(6));\nconsole.log('''');\nconsole.log(''FAF (7.7 DME on R-281):'');\nconsole.log(''  lat:'', FAF.lat.toFixed(6));\nconsole.log(''  lon:'', FAF.lon.toFixed(6));\n\")",
      "Bash(node -e \"\nconst RUNWAY_DATA = {\n  ''12R'': { heading: 120, threshold: { lat: 41 + 40/60 + 48.74/3600, lon: -(1 + 4/60 + 56.54/3600) } }\n};\n\nconsole.log(''Runway 12R threshold coordinates:'');\nconsole.log(''Lat:'', RUNWAY_DATA[''12R''].threshold.lat.toFixed(6));\nconsole.log(''Lon:'', RUNWAY_DATA[''12R''].threshold.lon.toFixed(6));\nconsole.log('''');\nconsole.log(''Zaragoza airport elevation is approximately 850 ft MSL'');\nconsole.log(''So threshold should be around 850 ft, but aircraft should descend to 0 AGL (850 MSL)'');\n\")"
    ],
    "deny": [],
    "ask": []
  }
}
